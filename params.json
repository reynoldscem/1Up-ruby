{"name":"1up-ruby","tagline":"","body":"Welcome\r\n=======\r\n\r\nHello and welcome to 1-UP's Ruby workshop. Whether you're entirely new to programming, new to the Ruby language or just want to learn something new - we hope that you will get something of benefit. You can work alone, or in pairs. Pair programming is a very good technique that is used alot in Agile teams. While it may seem like you'd get less work done with two programmers per computer, just think how much of your programming time are you spending actually typing and how much are you spending *thinking*.\r\n\r\nYou can see how to install Ruby on you operating system of choice [here](https://www.ruby-lang.org/en/installation/).\r\n\r\nBasic syntax\r\n============\r\n\r\nFirst off let's take a look at some basic methods in Ruby. `puts()` is used to print text to the screen. Try typing this in into a file called `anything.rb` and running it with `ruby anything.rb`.\r\n\r\n```ruby\r\nputs(\"Hello World!\")\r\nputs \"Hello world!\"\r\n```\r\n\r\nWe can see that \"Hello World!\" is printed twice, even though the second time the brackets were missing! In Ruby methods which take only one argument don't need brackets - this might seem weird if you're coming from other languages, but similar things happen in many languages it is often just that we don't think about what is happening behind the scenes.\r\n\r\n```ruby\r\n# Print out some arithmetic\r\nputs 1+2\r\nputs 1.+(2)\r\n```\r\n\r\nThese two lines do exactly the same thing. As it turns out the operators we use all the time are just methods lkie anything else and can be called with that standard `thing1.method(argument)` syntax. The process of making an easier to read form of elements of a programming language is called *sugar*. Ruby is a very sugary language - I'd argue this makes it pretty sweet to write ;)\r\n\r\nLet's try and make this a little more personal by printing out your own name - we can either get this from standard input or from command line arguments. In order to make this workshop a little less of a walkthrough, I'm going to try to avoid just giving you code to run and instead give you the building blocks and let you come up with a solution, this is to make it less tedious for those with some (or lots!) of programming experience. If you are new, and find yourself getting stuck be sure to ask for help!\r\n\r\nRead the following snippet, and see if you can print out a greeting to yourself, giving your name from standard input in just one line.\r\n\r\n```ruby \r\nsomeInput = gets.chomp\r\n# gets is used to get a line of input from standard in\r\n# chomp is used to 'eat up' newline characters off of strings\r\n\r\nstring1 = \"Ruby\"\r\nstring2 = \"open source\"\r\n\r\nputs \"#{string1} is completely #{strings2}\"\r\n# #{variable} is used to interpolate (include) variables in a string.\r\n# If you're used to other languages (Python, Java, C*), Ruby also supports interpolation in their style.\r\nputs \"%s is completely %s\" % [string1, string2]\r\n```\r\n\r\nAssuming you've got a solution for that (don't worry if it's a few lines) let's compare that to the same thing in Java.\r\n\r\n```java\r\nimport java.io.*;\r\npublic class example\r\n{\r\n  public static void main (String[] args)\r\n  {\r\n    try\r\n    {\r\n      BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in));\r\n      String name;\r\n      name = stdin.readLine();\r\n      System.out.println(\"Hello \" + name);\r\n    } catch (IOException e) {\r\n      System.err.println(\"IOException: \" + e.getMessage());\r\n    }\r\n  }\r\n}\r\n\r\n```\r\n\r\nA lot longer and harder to understand right? Maybe this will give an insight into why ruby programmers start preferring it so much over other languages. While this is a tiny example, the extra readability and ease of writing can make a huge difference in big projects!\r\n\r\nCollections\r\n===========\r\n\r\nIn programs we often want to have groups of things, the main ways we represent this is with `arrays` and `hashes`. Hashes are also called maps, dictionaries and hashmaps in other languages.\r\n\r\n```ruby\r\nanimals = [\"dog\", \"cat\", \"hamster\"]\r\nputs animals\r\n\r\npeople = [\"charlie\", \"mark\", \"dave\"]\r\nputs people\r\n\r\nnumbers = [78, 0, 47.8, -100, 1/0.0, Math::PI]\r\nputs numbers\r\nputs numbers.first\r\nputs numbers.max\r\n# Arrays come with some useful methods\r\n\r\nmixed = [78, nil, \"charlie\"]\r\nputs mixed\r\n# We can easily mix types in arrays (as everything is an object)\r\n\r\npetHash = {\"charlie\" => \"dog\", \"mark\" => \"cat\", \"dave\" => \"hamster\"}\r\nputs petHash.keys\r\nputs petHash.values\r\nputs petHash[\"charlie\"]\r\nputs petHash[\"dave\"]\r\n\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}